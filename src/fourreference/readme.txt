当Java虚拟机(JVM)觉得内存不够用的时候，会触发垃圾回收操作(GC)，清除无用的对象，释放内存。
可是如何判断一个对象是否是垃圾呢？其中的一个方法是计算指向该对象的引用数量，如果引用数量为0，
那么该对象就为垃圾(Thread对象是例外)，否则还有用处，不能被回收。但是如果把引用数为0的对象都回收了，
还是不能满足内存需求怎么办？Java把引用分为4种类型，垃圾回收器会尝试回收只有弱引用的对象。


在实现一个缓存系统的时候，如果全部使用强引用，那么你需要自己去手动的把某些引用clear掉(引用置位null)，否则迟早会抛出out of memory错误。
缓存系统引入弱引用或者软引用的唯一原因是，把引用clear的事情交由Java垃圾回收器来处理，cache程序自己置身事外